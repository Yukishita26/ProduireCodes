「vector.rdr」を参照する

【C：行列】=行列（｛｛1，2｝，｛3，4｝｝）を作ったもの
Cの文字列を表示
Z=Cの逆行列

行列をテストする手順
	A=行列（｛｛1，2，3｝，｛4，5，6｝｝）を作ったもの
	Aの文字列を表示する
	ーーAから第1行を取得したものの文字列を表示する
	ーーAから第1列を取得したものの文字列を表示する
	Aの転置の文字列を表示する
	B=行列（｛｛3，4｝，｛5，6｝，｛7，8｝｝）を作ったもの
	ーーBの文字列を表示する
	AとBの行列積の文字列を表示する

	3の単位行列の文字列を表示する
終わり

【n：整数】の，単位行列を求める手順
	【データ】=｛｛｝｝
	ｎ回，［ｉ］にカウントしながら繰り返す
		もしｉ≠1ならデータへ｛｝を追加する
		ｎ回，［ｊ］にカウントしながら繰り返す
			もしｉ=ｊならば
				データ（ｉ）へ1を追加する
			そうでなければ
				データ（ｉ）へ0を追加する
			もし終わり
		繰り返し終わり
	繰り返し終わり
	行列（データ）を作ったものを返す
終わり

行列とは
	整数である行数を持つ
	整数である列数を持つ
	【中身：ベクトルの配列】を持つ
	はじめ（データ）の手順
		行数=データの個数
		列数=データ（1）の個数
		中身=｛｝
		データのすべての行について『
			ベクトル（行）を作ったものを中身へ追加する
			もし列数と行の個数が等しくないなら「行の長さが異なります」というエラーを発生させる
		』ことをそれぞれ繰り返す
		ーー「［行数］×［列数］：［改行］［自分の文字列］」を表示する
	終わり

	【自分】から第，【ｎ：整数】行を，取得する手順：ベクトル
		中身のｎ番目を返す
	終わり

	【自分】から第，【ｎ：整数】列を，取得する手順：ベクトル
		データ=｛｝
		中身のすべての行について『
			行から第n成分を取得したものをデータへ追加する
		』ことをそれぞれ繰り返す
		ベクトル（データ）を作ったものを返す
	終わり

	【自分】の，転置を求める手順：行列
		【データ】=｛｛｝｝
		列数回，［n］にカウントしながら繰り返す
			もしｎ≠1ならデータへ｛｝を追加する
			データ（ｎ）=自分から第n列を取得したものの中身
		繰り返し終わり
		行列（データ）を作ったものを返す
	終わり

	【自分】と，【他の行列：行列】の，行列積を求める手順：行列
		もし他の行列の行数と列数が等しくないなら「行列のサイズが不適当です」というエラーを発生させる
		右項=他の行列の転置
		右項の文字列を表示する
		データ=｛｛｝｝
		行数回，［ｉ］にカウントしながら繰り返す
			もしｉ≠1ならデータへ｛｝を追加する
			右項の行数回，［ｊ］にカウントしながら繰り返す
				ーー「［ｉ］，［ｊ］」を表示する
				【x：ベクトル】=自分から第ｉ行を取得したもの
				【y：ベクトル】=右項から第ｊ行を取得したもの
				ーーｘの文字列を表示する
				ーーｙの文字列を表示する
				（ｘとｙの内積）をデータ（ｉ）へ追加する
			繰り返し終わり
		繰り返し終わり
		行列（データ）を作ったものを返す
	終わり

	【自分】の，【ｉ】番目と，【ｊ】番目で，行交換する手順
		中身のｉ番目とｊ番目を交換する
	終わり

	【自分】の，【ｉ】番目を，【ｃ】倍に，行乗算する手順
		中身のｉ番目とｃのスカラー倍
	終わり

	【自分】の，逆行列を求める手順：行列
		もし行数≠列数なら「正方行列ではありません」というエラーを発生させる
		データ=｛｛｝｝
		【単位行列】=行数の単位行列
		行数回，［ｉ］にカウントしながら繰り返す
			もしｉ≠1ならデータへ｛｝を追加する
			自分から第ｉ行を取得したものの中身をデータ（ｉ）へ一括追加する
			単位行列から第ｉ行を取得したものの中身をデータ（ｉ）へ一括追加する
		繰り返し終わり
		【吐き出し行列】=行列（データ）を作ったもの
		行数回，［ｉ］にカウントしながら繰り返す
			ａ=吐き出し行列から第ｉ行を取得したものから第ｉ成分を取得したもの
		繰り返し終わり
		吐き出し行列を返す
	終わり

	【自分】の，文字列を求める手順：文字列
		【行文字列】=｛｝
		中身のすべての行について『
			行の文字列を行文字列へ追加する
		』ことをそれぞれ繰り返す
		行文字列を「[改行]」で繋げたものを返す
	終わり
終わり
